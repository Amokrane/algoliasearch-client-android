/*
 * Copyright (c) 2015 Algolia
 * http://www.algolia.com/
 *
 * Permission is hereby granted, free of charge, to any person obtaining a copy
 * of this software and associated documentation files (the "Software"), to deal
 * in the Software without restriction, including without limitation the rights
 * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
 * copies of the Software, and to permit persons to whom the Software is
 * furnished to do so, subject to the following conditions:
 *
 * The above copyright notice and this permission notice shall be included in
 * all copies or substantial portions of the Software.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
 * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
 * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
 * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
 * THE SOFTWARE.
 */

apply plugin: 'com.android.library'

ext {
    PUBLISH_GROUP_ID = rootProject.properties["PUBLISH_GROUP_ID"] ?: ""
    PUBLISH_VERSION = '3.0'
}

android {
    compileSdkVersion 21
    buildToolsVersion '21.1.2'
    defaultConfig {
        minSdkVersion 7
        targetSdkVersion 21
        versionCode 1
        versionName PUBLISH_VERSION
    }
    buildTypes {
        release {
            minifyEnabled false
            proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.pro'
        }
    }
    productFlavors {
        online
        offline
    }
    publishNonDefault true
    defaultPublishConfig "onlineRelease"
}
configurations {
    // Configuration solely created to make the Android classpath available when compiling Javadocs.
    // Taken from: <http://stackoverflow.com/questions/29663918/android-gradle-javadoc-annotation-does-not-exists>.
    javadoc
}

repositories {
    // Only used during development, when targeting a snapshot version of some dependency.
    maven {
        url "https://oss.sonatype.org/content/repositories/snapshots/"
    }
}

dependencies {
    compile 'com.android.support:appcompat-v7:21.0.3'
    compile fileTree(include: ['*.jar'], dir: 'libs')

    testCompile "junit:junit:4.12"
    testCompile "org.assertj:assertj-core:1.7.0"
    testCompile "org.robolectric:robolectric:3.0"

    offlineCompile "com.algolia:algoliasearchsdk-android:0.1-SNAPSHOT"

    // PowerMock brings in the mockito dependency
    testCompile "org.powermock:powermock-module-junit4:1.6.1"
    testCompile "org.powermock:powermock-module-junit4-rule:1.6.1"
    testCompile "org.powermock:powermock-classloading-xstream:1.6.1"
    testCompile "org.powermock:powermock-api-mockito:1.6.1"

    javadoc 'com.android.support:support-annotations:22.2.0'
}

// Javadoc
// -------

// Compile docs.
task onlineJavadoc(type: Javadoc) {
    source = android.sourceSets.main.java.srcDirs
    options.memberLevel = JavadocMemberLevel.PUBLIC
    classpath += project.files(android.getBootClasspath().join(File.pathSeparator))
    classpath += configurations.javadoc
}
task offlineJavadoc(type: Javadoc) {
    source = android.sourceSets.main.java.srcDirs + android.sourceSets.offline.java.srcDirs
    options.memberLevel = JavadocMemberLevel.PUBLIC
    classpath += project.files(android.getBootClasspath().join(File.pathSeparator))
    classpath += configurations.javadoc
}

// Package docs into a jar.
task onlineJavadocJar(type: Jar, dependsOn: onlineJavadoc) {
    classifier = 'javadoc' // used in Maven publication
    from onlineJavadoc.destinationDir
}
task offlineJavadocJar(type: Jar, dependsOn: offlineJavadoc) {
    classifier = 'javadoc' // used in Maven publication
    from offlineJavadoc.destinationDir
}

// Maven publishing
// ----------------

// We use the new, incubating (as of 2016-04-22) "maven-publish" plugin, because it is easier to use than the legacy
// "maven" pluging. See <https://docs.gradle.org/current/userguide/publishing_maven.html> for documentation.
apply plugin: 'maven-publish'

publishing {
    publications {
        online(MavenPublication) {
            groupId PUBLISH_GROUP_ID
            artifactId "algoliasearch-android"
            version PUBLISH_VERSION

            // WARNING: Because of the on-the-fly generation of Android-related tasks, we cannot simply reference
            // the main artifact here. We add it asynchronously (in an `afterEvaluate` block, see below).
            // NOTE: Referencing the file manually is not a good option, as it would ignore the dependencies between
            // the tasks, so we would run the risk of publishing an outdated artifact.
            artifact(onlineJavadocJar)
        }
        offline(MavenPublication) {
            groupId PUBLISH_GROUP_ID
            artifactId "algoliasearch-offline-android"
            version PUBLISH_VERSION

            // WARNING: See above.
            artifact(offlineJavadocJar)
        }
        [online, offline].each {
            // Because the main artifact is not directly referenced here, its dependencies are not included in the POM.
            // The following code propagates them. Solution found on Stack Overflow:
            // <http://stackoverflow.com/questions/24743562/gradle-not-including-dependencies-in-published-pom-xml>
            def publicationName = it.name
            it.pom.withXml {
                def dependenciesNode = asNode().appendNode('dependencies')
                // For each dependency...
                def dependencies = configurations.compile.allDependencies + configurations[publicationName + "Compile"].allDependencies
                dependencies.each {
                    // If the dependency is an external package...
                    if (it.group != null && it.name != null && it.version != null) {
                        // Add a `dependency` node.
                        def dependencyNode = dependenciesNode.appendNode('dependency')
                        dependencyNode.appendNode('groupId', it.group)
                        dependencyNode.appendNode('artifactId', it.name)
                        dependencyNode.appendNode('version', it.version)
                    }
                }
            }
        }
    }
    repositories {
        // Local directory.
        // Useful to control the contents of the publication before publishing to the remote repository.
        maven {
            name "localDir"
            url "$buildDir/mvnrep"
        }
        // Maven Central repository.
        maven {
            name "mavenCentral"
            // Publish snapshot versions to the snapshots repository, and regular versions to the staging repository.
            url PUBLISH_VERSION.endsWith("-SNAPSHOT") ?
                "https://oss.sonatype.org/content/repositories/snapshots/" :
                "https://oss.sonatype.org/service/local/staging/deploy/maven2/"
            authentication {
                digest(DigestAuthentication)
            }
            credentials {
                username = project.hasProperty('nexusUsername') ? project['nexusUsername'] : 'FIXME'
                password = project.hasProperty('nexusPassword') ? project['nexusPassword'] : 'FIXME'
            }
        }
    }
}
afterEvaluate {
    // Add main artifacts to the publications.
    // (See the `publishing` block to understand the necessity of doing so.)
    publishing.publications.online.artifact(bundleOnlineRelease) {
        classifier = null
    }
    publishing.publications.offline.artifact(bundleOfflineRelease) {
        classifier = null
    }
}
